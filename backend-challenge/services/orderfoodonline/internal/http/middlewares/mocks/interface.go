// Code generated by MockGen. DO NOT EDIT.
// Source: internal/http/middlewares/interface.go
//
// Generated by this command:
//
//	mockgen -source=internal/http/middlewares/interface.go -destination=internal/http/middlewares/mocks/interface.go -package mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gin "github.com/gin-gonic/gin"
	gomock "go.uber.org/mock/gomock"
)

// MockAuthMiddleware is a mock of AuthMiddleware interface.
type MockAuthMiddleware struct {
	ctrl     *gomock.Controller
	recorder *MockAuthMiddlewareMockRecorder
	isgomock struct{}
}

// MockAuthMiddlewareMockRecorder is the mock recorder for MockAuthMiddleware.
type MockAuthMiddlewareMockRecorder struct {
	mock *MockAuthMiddleware
}

// NewMockAuthMiddleware creates a new mock instance.
func NewMockAuthMiddleware(ctrl *gomock.Controller) *MockAuthMiddleware {
	mock := &MockAuthMiddleware{ctrl: ctrl}
	mock.recorder = &MockAuthMiddlewareMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthMiddleware) EXPECT() *MockAuthMiddlewareMockRecorder {
	return m.recorder
}

// Authenticate mocks base method.
func (m *MockAuthMiddleware) Authenticate() gin.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authenticate")
	ret0, _ := ret[0].(gin.HandlerFunc)
	return ret0
}

// Authenticate indicates an expected call of Authenticate.
func (mr *MockAuthMiddlewareMockRecorder) Authenticate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authenticate", reflect.TypeOf((*MockAuthMiddleware)(nil).Authenticate))
}

// Authorize mocks base method.
func (m *MockAuthMiddleware) Authorize() gin.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authorize")
	ret0, _ := ret[0].(gin.HandlerFunc)
	return ret0
}

// Authorize indicates an expected call of Authorize.
func (mr *MockAuthMiddlewareMockRecorder) Authorize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authorize", reflect.TypeOf((*MockAuthMiddleware)(nil).Authorize))
}
