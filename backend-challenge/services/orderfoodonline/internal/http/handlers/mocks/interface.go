// Code generated by MockGen. DO NOT EDIT.
// Source: internal/http/handlers/interface.go
//
// Generated by this command:
//
//	mockgen -source=internal/http/handlers/interface.go -destination=internal/http/handlers/mocks/interface.go -package mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gin "github.com/gin-gonic/gin"
	gomock "go.uber.org/mock/gomock"
)

// MockSwaggerHandler is a mock of SwaggerHandler interface.
type MockSwaggerHandler struct {
	ctrl     *gomock.Controller
	recorder *MockSwaggerHandlerMockRecorder
	isgomock struct{}
}

// MockSwaggerHandlerMockRecorder is the mock recorder for MockSwaggerHandler.
type MockSwaggerHandlerMockRecorder struct {
	mock *MockSwaggerHandler
}

// NewMockSwaggerHandler creates a new mock instance.
func NewMockSwaggerHandler(ctrl *gomock.Controller) *MockSwaggerHandler {
	mock := &MockSwaggerHandler{ctrl: ctrl}
	mock.recorder = &MockSwaggerHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSwaggerHandler) EXPECT() *MockSwaggerHandlerMockRecorder {
	return m.recorder
}

// GetSwaggerJSONHandler mocks base method.
func (m *MockSwaggerHandler) GetSwaggerJSONHandler(arg0 *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetSwaggerJSONHandler", arg0)
}

// GetSwaggerJSONHandler indicates an expected call of GetSwaggerJSONHandler.
func (mr *MockSwaggerHandlerMockRecorder) GetSwaggerJSONHandler(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSwaggerJSONHandler", reflect.TypeOf((*MockSwaggerHandler)(nil).GetSwaggerJSONHandler), arg0)
}

// MockProductHandler is a mock of ProductHandler interface.
type MockProductHandler struct {
	ctrl     *gomock.Controller
	recorder *MockProductHandlerMockRecorder
	isgomock struct{}
}

// MockProductHandlerMockRecorder is the mock recorder for MockProductHandler.
type MockProductHandlerMockRecorder struct {
	mock *MockProductHandler
}

// NewMockProductHandler creates a new mock instance.
func NewMockProductHandler(ctrl *gomock.Controller) *MockProductHandler {
	mock := &MockProductHandler{ctrl: ctrl}
	mock.recorder = &MockProductHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductHandler) EXPECT() *MockProductHandlerMockRecorder {
	return m.recorder
}

// GetProductByID mocks base method.
func (m *MockProductHandler) GetProductByID(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetProductByID", c)
}

// GetProductByID indicates an expected call of GetProductByID.
func (mr *MockProductHandlerMockRecorder) GetProductByID(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductByID", reflect.TypeOf((*MockProductHandler)(nil).GetProductByID), c)
}

// ListProducts mocks base method.
func (m *MockProductHandler) ListProducts(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ListProducts", c)
}

// ListProducts indicates an expected call of ListProducts.
func (mr *MockProductHandlerMockRecorder) ListProducts(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProducts", reflect.TypeOf((*MockProductHandler)(nil).ListProducts), c)
}

// MockOrderHandler is a mock of OrderHandler interface.
type MockOrderHandler struct {
	ctrl     *gomock.Controller
	recorder *MockOrderHandlerMockRecorder
	isgomock struct{}
}

// MockOrderHandlerMockRecorder is the mock recorder for MockOrderHandler.
type MockOrderHandlerMockRecorder struct {
	mock *MockOrderHandler
}

// NewMockOrderHandler creates a new mock instance.
func NewMockOrderHandler(ctrl *gomock.Controller) *MockOrderHandler {
	mock := &MockOrderHandler{ctrl: ctrl}
	mock.recorder = &MockOrderHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderHandler) EXPECT() *MockOrderHandlerMockRecorder {
	return m.recorder
}

// PlaceOrder mocks base method.
func (m *MockOrderHandler) PlaceOrder(c *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PlaceOrder", c)
}

// PlaceOrder indicates an expected call of PlaceOrder.
func (mr *MockOrderHandlerMockRecorder) PlaceOrder(c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PlaceOrder", reflect.TypeOf((*MockOrderHandler)(nil).PlaceOrder), c)
}
