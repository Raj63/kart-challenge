// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/interface.go
//
// Generated by this command:
//
//	mockgen -source=internal/repository/interface.go -destination=internal/repository/mocks/interface.go -package mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	models "coupons/internal/repository/models"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockCouponRepository is a mock of CouponRepository interface.
type MockCouponRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCouponRepositoryMockRecorder
	isgomock struct{}
}

// MockCouponRepositoryMockRecorder is the mock recorder for MockCouponRepository.
type MockCouponRepositoryMockRecorder struct {
	mock *MockCouponRepository
}

// NewMockCouponRepository creates a new mock instance.
func NewMockCouponRepository(ctrl *gomock.Controller) *MockCouponRepository {
	mock := &MockCouponRepository{ctrl: ctrl}
	mock.recorder = &MockCouponRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCouponRepository) EXPECT() *MockCouponRepositoryMockRecorder {
	return m.recorder
}

// AddCoupons mocks base method.
func (m *MockCouponRepository) AddCoupons(ctx context.Context, fileName string, codes []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCoupons", ctx, fileName, codes)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddCoupons indicates an expected call of AddCoupons.
func (mr *MockCouponRepositoryMockRecorder) AddCoupons(ctx, fileName, codes any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCoupons", reflect.TypeOf((*MockCouponRepository)(nil).AddCoupons), ctx, fileName, codes)
}

// DeactivateCoupons mocks base method.
func (m *MockCouponRepository) DeactivateCoupons(ctx context.Context, fileName string, codes []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeactivateCoupons", ctx, fileName, codes)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeactivateCoupons indicates an expected call of DeactivateCoupons.
func (mr *MockCouponRepositoryMockRecorder) DeactivateCoupons(ctx, fileName, codes any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeactivateCoupons", reflect.TypeOf((*MockCouponRepository)(nil).DeactivateCoupons), ctx, fileName, codes)
}

// InsertProcessedFile mocks base method.
func (m *MockCouponRepository) InsertProcessedFile(ctx context.Context, file *models.ProcessedCouponFile) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertProcessedFile", ctx, file)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertProcessedFile indicates an expected call of InsertProcessedFile.
func (mr *MockCouponRepositoryMockRecorder) InsertProcessedFile(ctx, file any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertProcessedFile", reflect.TypeOf((*MockCouponRepository)(nil).InsertProcessedFile), ctx, file)
}

// IsFileProcessed mocks base method.
func (m *MockCouponRepository) IsFileProcessed(ctx context.Context, isAdd bool, filename string) (*models.ProcessedCouponFile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsFileProcessed", ctx, isAdd, filename)
	ret0, _ := ret[0].(*models.ProcessedCouponFile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsFileProcessed indicates an expected call of IsFileProcessed.
func (mr *MockCouponRepositoryMockRecorder) IsFileProcessed(ctx, isAdd, filename any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsFileProcessed", reflect.TypeOf((*MockCouponRepository)(nil).IsFileProcessed), ctx, isAdd, filename)
}

// UpdateProcessingStatus mocks base method.
func (m *MockCouponRepository) UpdateProcessingStatus(ctx context.Context, id, status string, total int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProcessingStatus", ctx, id, status, total)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProcessingStatus indicates an expected call of UpdateProcessingStatus.
func (mr *MockCouponRepositoryMockRecorder) UpdateProcessingStatus(ctx, id, status, total any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProcessingStatus", reflect.TypeOf((*MockCouponRepository)(nil).UpdateProcessingStatus), ctx, id, status, total)
}
